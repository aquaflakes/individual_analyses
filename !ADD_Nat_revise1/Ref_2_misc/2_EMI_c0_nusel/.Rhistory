{
MGW=ht[[feature]] %>% colMeans(na.rm = T) %>% {tibble(type="HT",feature=feature,pos=1:length(.),meanVal=.)}
MGW=ncap[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="NCAP",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW=c0[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="c0",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW %<>% mutate(pos=pos-97) %>% dplyr::filter(pos<-1 | pos>8)
p=ggplot(MGW)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)
# print(plotly::ggplotly(p))
print(p)
# ggplot(MGW)+geom_smooth(aes(pos,meanVal,color=type),span = 0.15)
return(MGW)
}
MGW=collectAll("MGW")
HelT=collectAll("HelT")
ProT=collectAll("ProT")
Roll=collectAll("Roll")
EP=collectAll("EP")
MGW=collectAll("MGW")
collectAll <-function(feature="MGW")
{
MGW=ht[[feature]] %>% colMeans(na.rm = T) %>% {tibble(type="HT",feature=feature,pos=1:length(.),meanVal=.)}
MGW=ncap[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="NCAP",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW=c0[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="c0",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW %<>% mutate(pos=pos-97) %>% dplyr::filter(pos<-1 | pos>8)
p=ggplot(MGW)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)
# print(plotly::ggplotly(p))
print(p)
# ggplot(MGW)+geom_smooth(aes(pos,meanVal,color=type),span = 0.15)
return(MGW)
}
MGW=collectAll("MGW")
collectAll <-function(feature="MGW")
{
MGW=ht[[feature]] %>% colMeans(na.rm = T) %>% {tibble(type="HT",feature=feature,pos=1:length(.),meanVal=.)}
MGW=ncap[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="NCAP",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW=c0[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="c0",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW %<>% mutate(pos=pos-97) %>% dplyr::filter(pos<(-1) | pos>8)
p=ggplot(MGW)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)
# print(plotly::ggplotly(p))
print(p)
# ggplot(MGW)+geom_smooth(aes(pos,meanVal,color=type),span = 0.15)
return(MGW)
}
MGW=collectAll("MGW")
collectAll <-function(feature="MGW")
{
MGW=ht[[feature]] %>% colMeans(na.rm = T) %>% {tibble(type="HT",feature=feature,pos=1:length(.),meanVal=.)}
MGW=ncap[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="NCAP",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW=c0[[feature]]%>% colMeans(na.rm = T) %>% {tibble(type="c0",feature=feature,pos=1:length(.),meanVal=.)} %>% rbind(MGW)
MGW %<>% mutate(pos=pos-97) #%>% dplyr::filter(pos<0 | pos>7)
p=ggplot(MGW)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)
# print(plotly::ggplotly(p))
print(p)
# ggplot(MGW)+geom_smooth(aes(pos,meanVal,color=type),span = 0.15)
return(MGW)
}
MGW=collectAll("MGW")
HelT=collectAll("HelT")
ProT=collectAll("ProT")
Roll=collectAll("Roll")
EP=collectAll("EP")
Roll=collectAll("Roll")
plotdata=rbind(MGW,HelT,ProT,Roll,EP)
View(HelT)
ggplot(MGW)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)+
facet_wrap(~feature)
plotdata=rbind(MGW,HelT,ProT,Roll,EP)
ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)+
facet_wrap(~feature)
ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)+
facet_wrap(~feature,scales = "free_y")
getShape
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/3_SOX_DNAshape/v2_aligned_to_motif/2_pred_shape/sox_NCAP_shape.R', echo=TRUE)
ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)+
facet_wrap(~feature,scales = "free_y")+scale_color_manual(values = c("grey","orange","steelblue"))
ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.3)+
facet_wrap(~feature,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"))
ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange")) + xlab("(bp)")
ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),names="") + xlab("(bp)")+ylab("Mean value")
ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,2,7,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,20,7,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,2,7,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,25,7,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,25,7,filename = "allfeatures")
gg_save_pdf(p,25,10,filename = "allfeatures")
gg_save_pdf(p,25,13,filename = "allfeatures")
gg_save_pdf(p,25,15,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),alpha=0.8)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,25,15,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type))+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,25,15,filename = "allfeatures")
gg_save_pdf(p,20.7,10,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0,5)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,20.7,10,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0.5)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,20.7,10,filename = "allfeatures")
gg_save_pdf(p,20.7,10,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0.1)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,20.7,10,filename = "allfeatures")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0.3)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,20.7,10,filename = "allfeatures")
saveRDS(plotdata,"plotdata.Robj")
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/3_SOX_DNAshape/v2_aligned_to_motif/2_pred_shape/sox_NCAP_shape.R', echo=TRUE)
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0.3)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7,linetype=2)+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0.3)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7,linetype="dashed")+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
gg_save_pdf(p,20.7,10,filename = "allfeatures")
p+scale_y_continuous()
p+scale_y_continuous(limits = waiver()/2)
p+scale_y_continuous(limits = waiver())
?scale_y_continuous
waiver()
p+scale_y_continuous(limits = c(min,max))
p+scale_y_continuous(limits = c(0,function(x)(max)))
p+scale_y_continuous(limits = range )
p+scale_y_continuous(limits = range() )
p$scales
p$scales
p$scales$scales
get_breaks p$scales$
get_breaks(p$scales)
ggplot2:::limits()
p$coordinates
p$layers
p$layers[[1]]
p$layers[[1]]$stat
p+scale_x_continuous(breaks = waiver())
p+scale_y_continuous(breaks = waiver())
p+scale_y_continuous(breaks = waiver() %>% ./2)
p+scale_y_continuous(breaks = waiver()/2)
p+scale_y_continuous(breaks = (waiver())/2)
p+scale_y_continuous(limits = (waiver())/2)
p+scale_y_continuous(limits = (waiver())+2)
p+scale_y_continuous(limits = (waiver()))
p+scale_y_continuous(limits = waiver())
p+scale_y_continuous(limits = 0)
myBreaks <- function(x){
breaks <- c(min(x),median(x),max(x))
names(breaks) <- attr(breaks,"labels")
breaks
}
p+scale_x_continuous(breaks = myBreaks)
myBreaks <- function(x){
breaks <- c(min(x),median(x),max(x))
# names(breaks) <- attr(breaks,"labels")
breaks
}
p+scale_x_continuous(breaks = myBreaks)
myBreaks <- function(x){
breaks <- c(min(x),median(x),max(x))
names(breaks) <- attr(breaks,"labels")
breaks
}
p+scale_x_continuous(breaks = myBreaks)
myBreaks <- function(x){
breaks <- c(min(x),median(x),max(x))
browser()
names(breaks) <- attr(breaks,"labels")
breaks
}
p+scale_x_continuous(breaks = myBreaks)
names(breaks)
attr(breaks,"labels")
p+scale_x_continuous(breaks = myBreaks,labels = percent_format())
??percent_format
p+scale_x_continuous(breaks = myBreaks,labels = scales::percent_format())
attr(breaks,"labels")
limitsCalc<- function(x){
limits <- c(min(x),max(x))
limits
}
p+scale_x_continuous(breaks = limitsCalc())
x
p+scale_x_continuous(breaks = limitsCalc)
p+scale_x_continuous(breaks = limitsCalc/2)
p+scale_x_continuous(breaks = {limitsCalc(.)/2})
p+scale_x_continuous(breaks = function(x){limitsCalc(x)/2})
p+scale_y_continuous(breaks = function(x){limitsCalc(x)/2})
p+scale_y_continuous(breaks = limitsCalc)
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0.3)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7,linetype="dashed")+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
p+scale_y_continuous(breaks = limitsCalc)
limitsCalc<- function(x){
limits <- c(min(x),max(x))/2
limits
}
p+scale_y_continuous(breaks = limitsCalc)
p+scale_y_continuous(limits= limitsCalc)
p=ggplot(plotdata)+geom_line(aes(pos,meanVal,color=type),size=0.3)+scale_x_continuous(expand = c(0,0),limits = c(-50,50),breaks = c(-50,0,50))+geom_vline(xintercept = c(0,7),alpha=0.7,linetype="dashed")+
facet_wrap(~feature,3,5,scales = "free_y")+scale_color_manual(values = c("black","steelblue","orange"),name="") + xlab("(bp)")+ylab("Mean value")
limitsCalc<- function(x){
browser()
limits <- c(min(x),max(x))/2
limits
}
p+scale_y_continuous(limits= limitsCalc)
options(error = recover)
p+scale_y_continuous(limits= limitsCalc)
x
scale_x_continuous
continuous_scale
ggproto
continuous_scale<-function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(),
minor_breaks = waiver(), labels = waiver(), limits = NULL,
rescaler = rescale, oob = censor, expand = waiver(), na.value = NA_real_,
trans = "identity", guide = "legend", position = "left",
super = ScaleContinuous)
{
check_breaks_labels(breaks, labels)
position <- match.arg(position, c("left", "right", "top",
"bottom"))
if (is.null(breaks) && !is_position_aes(aesthetics) && guide !=
"none") {
guide <- "none"
}
trans <- as.trans(trans)
if (!is.null(limits)) {
browser()
limits <- trans$transform(limits)
}
ggproto(NULL, super, call = match.call(), aesthetics = aesthetics,
scale_name = scale_name, palette = palette, range = continuous_range(),
limits = limits, trans = trans, na.value = na.value,
expand = expand, rescaler = rescaler, oob = oob, name = name,
breaks = breaks, minor_breaks = minor_breaks, labels = labels,
guide = guide, position = position)
}
p+scale_y_continuous()
scale_y_continuous
scale_y_continuous<-function (name = waiver(), breaks = waiver(), minor_breaks = waiver(),
labels = waiver(), limits = NULL, expand = waiver(), oob = censor,
na.value = NA_real_, trans = "identity", position = "left",
sec.axis = waiver())
{
sc <- continuous_scale(c("y", "ymin", "ymax", "yend", "yintercept",
"ymin_final", "ymax_final", "lower", "middle", "upper"),
"position_c", identity, name = name, breaks = breaks,
minor_breaks = minor_breaks, labels = labels, limits = limits,
expand = expand, oob = oob, na.value = na.value, trans = trans,
guide = "none", position = position, super = ScaleContinuousPosition)
if (!is.waive(sec.axis)) {
if (is.formula(sec.axis))
sec.axis <- sec_axis(sec.axis)
if (!is.sec_axis(sec.axis))
stop("Secondary axes must be specified using 'sec_axis()'")
sc$secondary.axis <- sec.axis
}
sc
}
continuous_scale<-function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(),
minor_breaks = waiver(), labels = waiver(), limits = NULL,
rescaler = rescale, oob = censor, expand = waiver(), na.value = NA_real_,
trans = "identity", guide = "legend", position = "left",
super = ScaleContinuous)
{
check_breaks_labels(breaks, labels)
position <- match.arg(position, c("left", "right", "top",
"bottom"))
if (is.null(breaks) && !is_position_aes(aesthetics) && guide !=
"none") {
guide <- "none"
}
trans <- as.trans(trans)
if (!is.null(limits)) {
browser()
limits <- trans$transform(limits)
}
ggproto(NULL, super, call = match.call(), aesthetics = aesthetics,
scale_name = scale_name, palette = palette, range = continuous_range(),
limits = limits, trans = trans, na.value = na.value,
expand = expand, rescaler = rescaler, oob = oob, name = name,
breaks = breaks, minor_breaks = minor_breaks, labels = labels,
guide = guide, position = position)
}
p+scale_y_continuous()
continuous_scale<-function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(),
minor_breaks = waiver(), labels = waiver(), limits = NULL,
rescaler = rescale, oob = censor, expand = waiver(), na.value = NA_real_,
trans = "identity", guide = "legend", position = "left",
super = ScaleContinuous)
{
ggplot2:::check_breaks_labels(breaks, labels)
position <- match.arg(position, c("left", "right", "top",
"bottom"))
if (is.null(breaks) && !is_position_aes(aesthetics) && guide !=
"none") {
guide <- "none"
}
trans <- as.trans(trans)
if (!is.null(limits)) {
browser()
limits <- trans$transform(limits)
}
ggproto(NULL, super, call = match.call(), aesthetics = aesthetics,
scale_name = scale_name, palette = palette, range = continuous_range(),
limits = limits, trans = trans, na.value = na.value,
expand = expand, rescaler = rescaler, oob = oob, name = name,
breaks = breaks, minor_breaks = minor_breaks, labels = labels,
guide = guide, position = position)
}
p+scale_y_continuous()
??as.trans
continuous_scale<-function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(),
minor_breaks = waiver(), labels = waiver(), limits = NULL,
rescaler = rescale, oob = censor, expand = waiver(), na.value = NA_real_,
trans = "identity", guide = "legend", position = "left",
super = ScaleContinuous)
{
ggplot2:::check_breaks_labels(breaks, labels)
position <- match.arg(position, c("left", "right", "top",
"bottom"))
if (is.null(breaks) && !is_position_aes(aesthetics) && guide !=
"none") {
guide <- "none"
}
trans <- scales::as.trans(trans)
if (!is.null(limits)) {
browser()
limits <- trans$transform(limits)
}
ggproto(NULL, super, call = match.call(), aesthetics = aesthetics,
scale_name = scale_name, palette = palette, range = continuous_range(),
limits = limits, trans = trans, na.value = na.value,
expand = expand, rescaler = rescaler, oob = oob, name = name,
breaks = breaks, minor_breaks = minor_breaks, labels = labels,
guide = guide, position = position)
}
p+scale_y_continuous()
continuous_scale<-function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(),
minor_breaks = waiver(), labels = waiver(), limits = NULL,
rescaler = rescale, oob = censor, expand = waiver(), na.value = NA_real_,
trans = "identity", guide = "legend", position = "left",
super = ScaleContinuous)
{
ggplot2:::check_breaks_labels(breaks, labels)
position <- match.arg(position, c("left", "right", "top",
"bottom"))
if (is.null(breaks) && !is_position_aes(aesthetics) && guide !=
"none") {
guide <- "none"
}
browser()
trans <- scales::as.trans(trans)
if (!is.null(limits)) {
browser()
limits <- trans$transform(limits)
}
ggproto(NULL, super, call = match.call(), aesthetics = aesthetics,
scale_name = scale_name, palette = palette, range = continuous_range(),
limits = limits, trans = trans, na.value = na.value,
expand = expand, rescaler = rescaler, oob = oob, name = name,
breaks = breaks, minor_breaks = minor_breaks, labels = labels,
guide = guide, position = position)
}
p+scale_y_continuous()
trans
limits
aesthetics
break()
continuous_range
0
debug(ggproto)
continuous_scale<-function (aesthetics, scale_name, palette, name = waiver(), breaks = waiver(),
minor_breaks = waiver(), labels = waiver(), limits = NULL,
rescaler = rescale, oob = censor, expand = waiver(), na.value = NA_real_,
trans = "identity", guide = "legend", position = "left",
super = ScaleContinuous)
{
ggplot2:::check_breaks_labels(breaks, labels)
position <- match.arg(position, c("left", "right", "top",
"bottom"))
if (is.null(breaks) && !is_position_aes(aesthetics) && guide !=
"none") {
guide <- "none"
}
trans <- scales::as.trans(trans)
if (!is.null(limits)) {
limits <- trans$transform(limits)
}
ggproto(NULL, super, call = match.call(), aesthetics = aesthetics,
scale_name = scale_name, palette = palette, range = continuous_range(),
limits = limits, trans = trans, na.value = na.value,
expand = expand, rescaler = rescaler, oob = oob, name = name,
breaks = breaks, minor_breaks = minor_breaks, labels = labels,
guide = guide, position = position)
}
p+scale_y_continuous()
0
small <- subset(mtcars, cyl == 4)
big <- subset(mtcars, cyl > 4)
ggplot(small, aes(mpg, wt, colour = factor(cyl))) +
geom_point() +
lims(colour = c("4", "6", "8"))
small
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
paste0(basename(file),"_MI")
paste0(basename(file),"_MI")
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
list(c(file,"SOX11"))
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
result= purrr::map2(c(file),"SOX12",plotEMI)
result= purrr::map2(c(file),"SOX12",plotEMI)
plotEMI <-function(file,TFname="SOX11")
{
seq= readr::read_csv(file,col_names = F)
seq=rmdup(seq,1)
result_TFMI= oneOffCalc(paste0(basename(file),"_TFMI"),calcFun = ic_related_calc, calcFunParamList = list(seqs = seq[[1]],kmerLen = 3,filter_for_spacing = F,spacing = 0:10,type = "maxBias",maxBias_dimer_Params=list(type="topMI",topNo=10L)), asObj = T, useScriptPath = T)
# result_TFMI=ic_related_calc(seqs = seq[[1]],kmerLen = 3,filter_for_spacing = F,spacing = 0:10,type = "maxBias",maxBias_dimer_Params=list(type="topMI",topNo=10L))
TFMI_plot= gg_heat2D_MI(result_TFMI,grad_colors = gg_steelblue_red)#+guides(fill=F)
print(TFMI_plot)
gg_save_pdf(TFMI_plot,width = 7.2,height = 5.2,filename = TFname)
result_TFMI
}
result= purrr::map2(c(file),"SOX12",plotEMI)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
result
purrr::map2(result,c("SOX11","cyc0","Nucyc4"), function(x,y)x %>% mutate(TF=y))
result=purrr::map2(result,c("SOX11","cyc0","Nucyc4"), function(x,y)x %>% mutate(TF=y))
plotdf=do.call(rbind,result)
View(plotdf)
ggplot(result)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours = gg_steelblue_red)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours = c("white","red"))
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours = gg_steelblue_red)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours = c("white","red"))
c0file="~/Nut_zhuData/seqFiles2/c0/subset_500000_Trulig147v1IIIPEx200IIIc0_S3_R1_001.peared_trimmed.fq.gz"
result=purrr::map2(result,c("SOX11","cyc0","Nucyc4"), function(x,y)x %>% mutate(TF=y))
c0file="~/Nut_zhuData/seqFiles2/c0/subset_500000_Trulig147v1IIIPEx200IIIc0_S3_R1_001.peared_trimmed.fq.gz"
result=purrr::map2(result,c("SOX11","cyc0","Nucyc4"), function(x,y)x %>% mutate(TF=y))
result= purrr::map2(c(file,c0file,nufile),c("SOX11","cyc0","Nucyc4"),plotEMI)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
result= purrr::map2(c(soxfile,c0file,nufile,soxc4file),c("SOX11","cyc0","Nucyc4","SOX11_TFctrl"),plotEMI)
result=purrr::map2(result,c("SOX11","cyc0","Nucyc4"，"SOX11_TFctrl"), function(x,y)x %>% mutate(TF=y))
plotdf=do.call(rbind,result)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours = c("white","red"))
View(plotdf)
result=purrr::map2(result,c("SOX11","cyc0","Nucyc4"，"SOX11_TFctrl"), function(x,y)x %>% mutate(TF=y))
result=purrr::map2(result,c("SOX11","cyc0","Nucyc4","SOX11_TFctrl"), function(x,y)x %>% mutate(TF=y))
plotdf=do.call(rbind,result)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours = c("white","red"))
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours = c("white","red"))+lims(TF=c("cyc0","SOX11"))
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~factor(TF))+scale_fill_gradientn(colours = c("white","red"))+lims(TF=c("cyc0","SOX11"))
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red)
plotdf=do.call(rbind,result) %>% dplyr::filter(TF!="SOX11_TFctrl")
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red)
plotdf=do.call(rbind,result) %>% dplyr::filter(TF!="SOX11")
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
result
result= purrr::map2(c(file,c0file,nufile,c4file),c("DMBX1","cyc0","Nucyc4","DMBX1_TFctrl"),plotEMI)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red)+expand_limits(fill=0)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.1))+expand_limits(fill=0)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.08))+expand_limits(fill=0)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06))+expand_limits(fill=0)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06),breaks=c(0,0.06))+expand_limits(fill=0)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06),breaks=c(0,0.06),name="E-MI (bits)")+expand_limits(fill=0)
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06),breaks=c(0,0.06),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),limits = c(1,96))
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06),breaks=c(0,0.06),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06),breaks=c(0,0.06),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06),breaks=c(0,0.06),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.06),breaks=c(0,0.06),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),breaks=c(0,0.06),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),breaks=c(0,0.05),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),oob=scales::squish,breaks=c(0,0.05),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
TF=factor(plotdf$TF)
TF_wrap=factor(plotdf$TF)
TF_wrap
TF_wrap=factor(plotdf$TF,levels =c("cyc0","Nucyc4","HSF1","HSF1_TFctrl") )
TF_wrap
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF_wrap)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),oob=scales::squish,breaks=c(0,0.05),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
TF_wrap=factor(plotdf$TF,levels =c("cyc0","Nucyc4","HSF1","HSF1_TFctrl"),labels =c("Cycle 0","Nucl. SELEX","NCAP","HT")  )
TF_wrap
TF_wrap %>% end
TF_wrap %>% tail()
plotdf$TF=TF_wrap
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF_wrap)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),oob=scales::squish,breaks=c(0,0.05),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),oob=scales::squish,breaks=c(0,0.05),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
gg_save_pdf(p,12,10,filename = "EMI_nucl_c0_ctrl")
p=ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),oob=scales::squish,breaks=c(0,0.05),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")
gg_save_pdf(p,12,10,filename = "EMI_nucl_c0_ctrl")
gg_save_pdf(p,12.5,10,filename = "EMI_nucl_c0_ctrl")
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/!ADD_Nat_revise1/Ref_2_misc/2_EMI_c0_nusel/EMI_ctrl.R', echo=TRUE)
p=ggplot(plotdf)+geom_tile(aes(pos1,pos2,fill=topMIsum))+facet_wrap(~TF)+scale_fill_gradientn(colours =gg_steelblue_red,limits=c(0,0.05),oob=scales::squish,breaks=c(0,0.05),name="E-MI (bits)")+expand_limits(fill=0)+scale_x_continuous(expand = c(0,0),breaks = c(1,96))+scale_y_continuous(expand = c(0,0),breaks = c(4,99))+xlab("(bp)")+ylab("(bp)")+gg_theme_Publication()
gg_save_pdf(p,12.5,10,filename = "EMI_nucl_c0_ctrl")
gg_breaks
p+scale_x_continuous(breaks = gg_breaks)
p+scale_x_continuous(breaks = gg_breaks,expand = c(0,0))
p+scale_x_continuous(breaks = function(x)gg_breaks(x,two_ticks = T),expand = c(0,0))
p+scale_x_continuous(breaks = function(x)gg_breaks(x,two_ticks = T,end_plus_middle = T),expand = c(0,0))
