source('~/Nut_zhuData/Analysis/Analysis2/Nusel/FJ4.5c5Nu_Free_cmp_maxBias/147bp_diss_circular_plot_minus/147_diss_EMI_diag_classify_147_minus.R', echo=TRUE)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/FJ4.5c5Nu_Free_cmp_maxBias/147bp_diss_circular_plot_minus/147_diss_EMI_diag_classify_147_minus.R', echo=TRUE)
colnames(MI_diag_Mat)=NULL
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/FJ4.5c5Nu_Free_cmp_maxBias/147bp_diss_circular_plot_minus/147_diss_EMI_diag_classify_147_minus.R', echo=TRUE)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/FJ4.5c5Nu_Free_cmp_maxBias/147bp_diss_circular_plot_minus/147_diss_EMI_diag_classify_147_minus.R', echo=TRUE)
library(fjComm)
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork.R', echo=TRUE)
TF147=fjComm::nusel_get_147()
View(TF147)
View(TF147)
View(TF147)
TF147=fjComm::nusel_get_147() %>% dplyr::filter(use==1 & order=1)
TF147=fjComm::nusel_get_147() %>% dplyr::filter(use==1 & order==1)
View(TF147)
TFctrl_files= TF147$c4_file
Nu_files= TF147$TFctrl_file
TFctrl_files= TF147$TFctrl_file
Nu_files= TF147$c4_file
TFctrl_files
Nu_files
TFctrl_files
Nu_files
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
traceback()
View(allComb)
View(edgelist)
View(guide)
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
netPlot
str(netPlot)
netPlot
TFs
families= fjComm::TF_classify(TFs)
families
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
debugSource('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
print(enet)
enet
plot(enet)
netPlot$data %>% View()
netPlot
enet
enet$mel
netPlot
netPlot1=ggnet2(enet)
netPlot1$data %>% View()
ggnet(enet)$data %>% View()
unlink("usefulResult/allCombCorr.csv")
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
unlink("oneOff/corrResult/corr_result.Robj")
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
View(allComb)
# optional, can use "enet"
ggNet= ggnetwork(enet, layout = "fruchtermanreingold")
ggVert= ggNet[is.na(ggNet$sameTF),]
ggEdge= ggNet[!is.na(ggNet$sameTF),]
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color=sameTF, size=I(corr))) +
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
View(ggEdge)
View(ggNet)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color=sameTF, size=I(corr))) +
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
View(ggNet)
View(ggNet)
ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color=sameTF, size=I(corr)))
ggNet$x
ggNet$y
ggNet$xend
ggNet$yend
View(ggEdge)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(data = ggEdge,aes(color=sameTF, size=I(corr))) +
geom_nodes(data = ggVert, aes(color = type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
View(ggEdge)
ggplot() + geom_edges(data = ggEdge,aes(color=sameTF, size=I(corr)))
ggplot() + geom_edges(data = ggEdge,aes(x = x,y = y, color=sameTF, size=I(corr)))
ggplot() + geom_edges(data = ggEdge, aes(x = x,y = y, color=sameTF, size=I(corr)))
p1=ggplot(ggNet, aes(x = x, y = y)) + geom_point()
p1
ggplot(ggNet, aes(x = x, y = y)) + geom_point()
ggplot(ggNet, aes(x = x, y = y)) + geom_point()
ggplot(ggNet, aes(x, y)) + geom_point()
ggplot() + geom_point(aes(ggNet$x,ggNet$y))
ggplot() + geom_point(aes(ggNet$x,ggNet$y))
ggNet$x
ggNet$x %>% unlist
ggNet$x %>% as.vector()
ggNet %>% dplyr::mutate_at(vars(x,y,xend,yend),as.vector)
ggNet %<>% dplyr::mutate_at(vars(x,y,xend,yend),as.vector)
ggNet %<>% dplyr::mutate_at(vars(x,y,xend,yend),.funs = as.vector)
ggNet %<>% dplyr::mutate_at(x=as.vector(x),y=as.vector(y),xend=as.vector(xend),yend=as.vector(yend)))
ggNet %<>% dplyr::mutate_at(x=as.vector(x),y=as.vector(y),xend=as.vector(xend),yend=as.vector(yend))
ggNet %<>% dplyr::mutate(x=as.vector(x),y=as.vector(y),xend=as.vector(xend),yend=as.vector(yend))
View(ggNet)
ggNet$x=as.vector(ggNet$x)
ggNet$x
ggNet$x=as.vector(ggNet$x); ggNet$y=as.vector(ggNet$y); ggNet$xend=as.vector(ggNet$xend); ggNet$yend=as.vector(ggNet$yend)
ggVert= ggNet[is.na(ggNet$sameTF),]
ggEdge= ggNet[!is.na(ggNet$sameTF),]
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color=sameTF, size=I(corr))) +
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
netPlot$data$x
ggNet$x=as.vector(ggNet$x); ggNet$y=as.vector(ggNet$y); ggNet$xend=as.vector(ggNet$xend); ggNet$yend=as.vector(ggNet$yend)
print(netPlot)
pacman::p_load(GGally)
# fix layout
set.seed(23)
netPlot=ggnet2(enet, shape = "type", color = "families", label = F,size = 4,label.size = 2, node.alpha = 0.4,
edge.color = "sameTF", edge.size = "corr",edge.alpha = 0.5) +
scale_color_discrete() + guides(color=F)
isUnPaired_alpha= ifelse(isUnPaired=="unPaired", 1,0)
netPlot=netPlot+ geom_nodes(color="red", alpha=isUnPaired_alpha) +
gg_anno_grob(paste0("---  TF pairs (",pairedFrac %>% prettyNum(digit=2),")\n"),x = 0.75,y=0.95,col = "blue",fontsize = 12)+
gg_anno_grob("circle: unpaired TFs",x = 0.75,y=0.9,col = "red",fontsize = 12)+
gg_anno_grob(paste0("pearson corr cutoff: ",cutoff),x = 0.75,y=0.99)
netPlot$data$x=as.vector(netPlot$data$x); netPlot$data$y=as.vector(netPlot$data$y); netPlot$data$xend=as.vector(netPlot$data$xend); netPlot$data$yend=as.vector(netPlot$data$yend)
print(netPlot)
gg_save_all(netPlot,22,18,newName = "plot/netPlot")
gg_save_all(netPlot+geom_nodetext(aes(label = verticesNames),size=2),22,18, newName = "plot/netPlot_withName")
netPlot$data$x
netPlot$data$y
pacman::p_load(GGally,update = T)
View(edgelist)
pacman::p_load(mgcv)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
enet
plot(enet)
View(edgelist)
vignette(package="network")
vignette("networkVignette")
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
plot(enet)
pacman::p_load(GGally)
# fix layout
set.seed(23)
netPlot=ggnet2(enet, shape = "type", color = "families", label = F,size = 4,label.size = 2, node.alpha = 0.4,
edge.color = "sameTF", edge.size = "corr",edge.alpha = 0.5) +
scale_color_discrete() + guides(color=F)
isUnPaired_alpha= ifelse(isUnPaired=="unPaired", 1,0)
netPlot=netPlot+ geom_nodes(color="red", alpha=isUnPaired_alpha) +
gg_anno_grob(paste0("---  TF pairs (",pairedFrac %>% prettyNum(digit=2),")\n"),x = 0.75,y=0.95,col = "blue",fontsize = 12)+
gg_anno_grob("circle: unpaired TFs",x = 0.75,y=0.9,col = "red",fontsize = 12)+
gg_anno_grob(paste0("pearson corr cutoff: ",cutoff),x = 0.75,y=0.99)
netPlot$data$x=as.vector(netPlot$data$x); netPlot$data$y=as.vector(netPlot$data$y); netPlot$data$xend=as.vector(netPlot$data$xend); netPlot$data$yend=as.vector(netPlot$data$yend)
print(netPlot)
gg_save_all(netPlot,22,18,newName = "plot/netPlot")
gg_save_all(netPlot+geom_nodetext(aes(label = verticesNames),size=2),22,18, newName = "plot/netPlot_withName")
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
ggNet= ggnetwork(enet, layout = "fruchtermanreingold")
ggNet$x=as.vector(ggNet$x); ggNet$y=as.vector(ggNet$y); ggNet$xend=as.vector(ggNet$xend); ggNet$yend=as.vector(ggNet$yend)
# ggVert= ggNet[is.na(ggNet$sameTF),]
# ggEdge= ggNet[!is.na(ggNet$sameTF),]
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color=sameTF, size=I(corr)*0.1)) +
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF, size=0.5)) +
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF, size=0.05))+
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF))+
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF),size=0.05)+
geom_nodes(aes(color = type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
View(ggNet)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF),size=0.1)+
geom_nodes(aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=I(sameTF)),size=0.1)+
geom_nodes(aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color=sameTF,size=0.1)+
geom_nodes(aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color=ggNet$sameTF,size=0.1)+
geom_nodes(aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color=ggEdge$sameTF,size=0.1)+
geom_nodes(aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
ggVert= ggNet[is.na(ggNet$sameTF),]
ggEdge= ggNet[!is.na(ggNet$sameTF),]
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color=ggEdge$sameTF,size=0.1)+
geom_nodes(aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot() +
geom_edges(data = ggEdge,color=ggEdge$sameTF,size=0.1)+
geom_nodes(data = ggVert,aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot() +
geom_edges(data = ggEdge,aes(x = x, y = y, xend = xend, yend = yend),color=ggEdge$sameTF,size=0.1)+
geom_nodes(data = ggVert,aes(x = x, y = y, color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
ggEdge$sameTF
ggEdge$sameTF %>% length()
p1=ggplot() +
geom_edges(data = ggEdge,aes(x = x, y = y, xend = xend, yend = yend),color=ggEdge$sameTF,size=0.1)+
geom_nodes(data = ggVert,aes(x = x, y = y, color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
ggEdge$sameTF
p1=ggplot() +
geom_edges(data = ggEdge,aes(x = x, y = y, xend = xend, yend = yend),color=ggEdge$sameTF,size=0.1)+
geom_nodes(data = ggVert,aes(x = x, y = y, color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
nrow(ggEdge)
p1=ggplot() +
geom_edges(data = ggEdge,aes(x = x, y = y, xend = xend, yend = yend),color=ggEdge$sameTF,size=0.1)+
# geom_nodes(data = ggVert,aes(x = x, y = y, color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
ggEdge$sameTF %>% length()
p1=ggplot() +
geom_edges(data = ggEdge,aes(x = x, y = y, xend = xend, yend = yend),color=sameTF,size=0.1)+
# geom_nodes(data = ggVert,aes(x = x, y = y, color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
View(ggEdge)
p1=ggplot() +
geom_edges(data = ggEdge,aes(x = x, y = y, xend = xend, yend = yend,color=sameTF),size=0.1)+
# geom_nodes(data = ggVert,aes(x = x, y = y, color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
p1=ggplot() +
geom_edges(data = ggEdge,aes(x = x, y = y, xend = xend, yend = yend,color=sameTF),size=0.1)+
geom_nodes(data = ggVert,aes(x = x, y = y, color = type,shape=type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color=ggEdge$sameTF,size=0.1)+
geom_nodes(aes(color = type,shape=type))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color=ggEdge$sameTF,size=0.1)+
geom_nodes(aes(color = type,shape=type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF),size=0.1)+
geom_nodes(aes(color = type,shape=type))+
geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF),size=0.1)+
geom_nodes(aes(shape=type),size=2)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF),size=0.1)+
geom_nodes(aes(color=families,shape=type),size=2)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(aes(color=sameTF),size=0.1)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=2)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
plotly::ggplotly(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.1)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=2)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
set.seed(24)
ggNet= ggnetwork(enet, layout = "fruchtermanreingold")
ggNet$x=as.vector(ggNet$x); ggNet$y=as.vector(ggNet$y); ggNet$xend=as.vector(ggNet$xend); ggNet$yend=as.vector(ggNet$yend)
ggVert= ggNet[is.na(ggNet$sameTF),]
ggEdge= ggNet[!is.na(ggNet$sameTF),]
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.1)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=2)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
# plotly::ggplotly(p1)
set.seed(27)
ggNet= ggnetwork(enet, layout = "fruchtermanreingold")
ggNet$x=as.vector(ggNet$x); ggNet$y=as.vector(ggNet$y); ggNet$xend=as.vector(ggNet$xend); ggNet$yend=as.vector(ggNet$yend)
ggVert= ggNet[is.na(ggNet$sameTF),]
ggEdge= ggNet[!is.na(ggNet$sameTF),]
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.1)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=2)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
set.seed(29)
ggNet= ggnetwork(enet, layout = "fruchtermanreingold")
ggNet$x=as.vector(ggNet$x); ggNet$y=as.vector(ggNet$y); ggNet$xend=as.vector(ggNet$xend); ggNet$yend=as.vector(ggNet$yend)
ggVert= ggNet[is.na(ggNet$sameTF),]
ggEdge= ggNet[!is.na(ggNet$sameTF),]
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.1)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=2)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.1)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=3,alpha=0.6)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=3,alpha=0.6)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
ggNet$families
ggNet$families %>% as.character()
ggNet$families %>% as.character() %>% fjComm::TF_color_acc_family()
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(shape=type,text=vertex.names),size=3,alpha=0.6,color=ggNet$families %>% as.character() %>% fjComm::TF_color_acc_family())+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(color=families,shape=type,text=vertex.names),size=3,alpha=0.6)+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
ggNet$families %>% as.character() %>% fjComm::TF_color_acc_family() %>% length()
ggVert$families %>% as.character() %>% fjComm::TF_color_acc_family() %>% length()
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(shape=type,text=vertex.names),size=3,alpha=0.6,color=( ggVert$families %>% as.character() %>% fjComm::TF_color_acc_family() %>% length()))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(shape=type,text=vertex.names),size=3,alpha=0.6,color=(ggVert$families %>% as.character() %>% fjComm::TF_color_acc_family())+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(shape=type,text=vertex.names),size=3,alpha=0.6,color=(ggVert$families %>% as.character() %>% fjComm::TF_color_acc_family()))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(shape=type,text=vertex.names),size=3,alpha=0.3,color=(ggVert$families %>% as.character() %>% fjComm::TF_color_acc_family()))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(shape=type,text=vertex.names),size=3,alpha=0.4,color=(ggVert$families %>% as.character() %>% fjComm::TF_color_acc_family()))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
p1=ggplot(ggNet, aes(x = x, y = y, xend = xend, yend = yend)) +
# geom_edges(aes(color=sameTF, size=I(corr)*0.5)) +
geom_edges(color="black",alpha=0.3,size=0.2)+
geom_nodes(aes(shape=type,text=vertex.names),size=3,alpha=0.6,color=(ggVert$families %>% as.character() %>% fjComm::TF_color_acc_family()))+
# geom_nodetext(aes(label = vertex.names),size=2)+
theme_blank()
print(p1)
plotly::ggplotly(p1)
TF_classify("NFAT4")
TF_classify("NFAT2")
TF_classify("SOX10")
TF_classify("NFAT")
TF_classify("NFAT2")
TF_classify("NFAT4")
TF_classify("NFAT1")
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
View(TF147)
source('~/Nut_zhuData/Analysis/Analysis2/Nusel/170420_motif_similarity_fig3/motif_similarity_top_kmers_allTFNetwork_v2.R', echo=TRUE)
debugSource('~/Nut_zhuData/seqFiles2/FJ4.6CAPFL/analysis/barcode_cmp/barcmp.R', echo=TRUE)
source('~/Nut_zhuData/seqFiles2/FJ4.6CAPFL/analysis/barcode_cmp/barcmp.R', echo=TRUE)
Rcpp::sourceCpp('~/Desktop/Nucleosome_manuscript/plotting_Scripts/fig7_scafold_effect/figS/40_bp_cooperation/posed_seed.cpp')
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/fig7_scafold_effect/figS/40_bp_cooperation/T_validation.R', echo=TRUE)
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/fig7_scafold_effect/figS/40_bp_cooperation/T_validation.R', echo=TRUE)
Rcpp::sourceCpp("posed_seed.cpp")
pfm=pfm_from_seed(seqs = seq,seed1 = topRec[[5]][1], gapLen = topRec[[2]][1]-topRec[[1]][1]-nchar(topRec[[5]][1]), seed2 = topRec[[6]][1], seed1_start = topRec$pos1,flankLen = 4,
all_start_with_specified_gap=T)
Rcpp::sourceCpp("posed_seed.cpp")
Rcpp::sourceCpp('posed_seed.cpp')
Rcpp::sourceCpp("posed_seed.cpp")
pfm=pfm_from_seed(seqs = seq,seed1 = topRec[[5]][1], gapLen = topRec[[2]][1]-topRec[[1]][1]-nchar(topRec[[5]][1]), seed2 = topRec[[6]][1], seed1_start = topRec$pos1,flankLen = 4,
all_start_with_specified_gap=T)
Rcpp::sourceCpp('posed_seed.cpp')
pfm=pfm_from_seed(seqs = seq,seed1 = topRec[[5]][1], gapLen = topRec[[2]][1]-topRec[[1]][1]-nchar(topRec[[5]][1]), seed2 = topRec[[6]][1], seed1_start = topRec$pos1,flankLen = 4,
all_start_with_specified_gap=T)
Rcpp::sourceCpp('posed_seed.cpp')
pfm=pfm_from_seed(seqs = seq,seed1 = topRec[[5]][1], gapLen = topRec[[2]][1]-topRec[[1]][1]-nchar(topRec[[5]][1]), seed2 = topRec[[6]][1], seed1_start = topRec$pos1,flankLen = 4,
all_start_with_specified_gap=T)
Rcpp::sourceCpp('posed_seed.cpp')
pfm=pfm_from_seed(seqs = seq,seed1 = topRec[[5]][1], gapLen = topRec[[2]][1]-topRec[[1]][1]-nchar(topRec[[5]][1]), seed2 = topRec[[6]][1], seed1_start = topRec$pos1,flankLen = 4,
all_start_with_specified_gap=T)
install.packages("Rcpp11")
source('~/Desktop/Nucleosome_manuscript/plotting_Scripts/fig7_scafold_effect/figS/40_bp_cooperation/T_validation.R', echo=TRUE)
Rcpp::sourceCpp("posed_seed.cpp")
pfm=pfm_from_seed(seqs = seq,seed1 = topRec[[5]][1], gapLen = topRec[[2]][1]-topRec[[1]][1]-nchar(topRec[[5]][1]), seed2 = topRec[[6]][1], seed1_start = topRec$pos1,flankLen = 4,
all_start_with_specified_gap=T)
fjComm::plotMotif_pfmMat(pfm)
